{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Data Onboarding - transformer builder","text":""},{"location":"#sample-transform-map-and-simplify-you-data-exchanges","title":"Sample, transform, map and simplify you data exchanges","text":"<p>Enable your customers and partners to upload CSV/XLS files and transform them to match your internal data schemas. The platform provides the infrastructure and components to generate data transformers and unique URLs for users to upload their data. </p> <p>Questions: Ask Here</p> <p>Live Demo: Here</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Upload CSV/XLS file: Users can easily upload their desired CSV/XLS file through the user interface.</li> <li>Column transformers: The project allows users to create transformers for each column using the ACE code editor.</li> <li>Restricted Python: The data transformer utilizes restricted Python to ensure secure and controlled data manipulation.</li> <li>Share a unique URL to upload/download files</li> <li>Trigger Webhook when a file is processed</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To get started with Xformer Builder, follow these steps:</p> <ol> <li>Clone the repository: <code>git clone https://github.com/marcelonyc/xformer-builder</code></li> <li>Run setup.sh <ul> <li>Requires Python &gt; 3.10 </li> </ul> </li> <li>In one terminal run: <code>start-dev-dataplane.sh</code></li> <li>In another terminal run: <code>start-dev-controlplane.sh</code></li> <li>Access the application through your web browser at <code>http://localhost:8050</code></li> </ol> <p></p> <p>Try it in the demo environment: Demo</p> <p>Suggestions for deployment architecture: Here</p>"},{"location":"#create-a-transformer","title":"Create a transformer","text":"<ol> <li>Upload CSV/XLS file: Click on \"Upload Sample CSV/XLS file\" and select the desired CSV/XLS file from your local machine.</li> <li>Create transformers: Use the ACE code editor to create transformers for each column. Ensure that the code adheres to the restricted Python guidelines.<ul> <li>Use <code>data</code> as the variable containing the source data.</li> <li>Use the dictionary <code>columns[]</code> to get values from other columns</li> <li>Examples:<ul> <li><code>data / 1000</code></li> <li><code>data.split(\"-\")</code></li> <li><code>data * columns['other_data']</code></li> </ul> </li> </ul> </li> <li>Test transformations: Once the transformers are created, click on the \"Test\" button to execute the transformations.<ul> <li>The result displays on the column's row. You need to expand it.</li> <li>Any errors will display in the column's row</li> </ul> </li> <li>When you are finished, Name the transformer</li> <li>Test all the transformers from the navigation bar</li> <li>Save transformers<ul> <li>The output goes to the console</li> </ul> </li> </ol> <p>The transformer is saved into multiple lists. Right now is just a print to the console. The actual code is base64 encoded.</p>"},{"location":"#application-configuration","title":"Application Configuration","text":"<p>To customize the application configuration, review the CONFIG.INI document</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! If you would like to contribute to Xformer Builder, please follow these guidelines:</p> <ol> <li>Fork the repository.</li> <li>Create a new branch for your feature or bug fix.</li> <li>Make your changes and commit them with descriptive messages.</li> <li>Push your changes to your forked repository.</li> <li>Submit a pull request to the main repository.</li> </ol>"},{"location":"#screenshots","title":"Screenshots","text":"<p>Here are some screenshots of the Xformer Builder application:</p>"},{"location":"#_1","title":"Home","text":""},{"location":"#_2","title":"Home","text":""},{"location":"#expand-row-to-see-transformation-resutls","title":"Expand row to see transformation resutls","text":""},{"location":"#technologies-and-tools-in-this-project","title":"Technologies and tools in this project","text":"<p>Build a data transformer using restricted Python with a Web UI using Dash. The transformer is designed to manipulate data in columns from a CSV/XLS file. The project provides a user interface (UI) that allows users to upload the CSV/XLS file and create transformers for each column using the ACE code editor.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License. See the LICENSE file for more information.</p>"},{"location":"ArchitectureSuggestions/","title":"Deployment Architecture Ideas","text":""},{"location":"ArchitectureSuggestions/#firewall","title":"Firewall","text":"<p>The firewall restrics access to specific ports. Cloud vendors offer security groups to associate with services running in your vpc.</p> <p>You need to, at least, forward 443 to 8050 where your ControlPlane service is running.</p>"},{"location":"ArchitectureSuggestions/#reverse-proxy","title":"Reverse Proxy","text":"<p>Use a reverse proxy to forward traffic to specific urls for the services. The reverse proxy also serves as your https endpoint where your SSL certificate resides. Get familiar with NGINX to understand the configuration.</p>"},{"location":"ArchitectureSuggestions/#nginx-example-i","title":"NGINX Example I","text":"<p>In this example I provide a file that would go into nginx /etc/nginx/servers directory. The nginx.conf file contains <code>include servers/*.conf</code></p>"},{"location":"ArchitectureSuggestions/#forward-all-calls-to-the-controlplane","title":"Forward all calls to the Controlplane","text":"<p>controlplane.conf</p> <pre><code>server {\n    listen 443 ssl;\n    server_name dataplane.somedomain.com;\n    proxy_intercept_errors on;\n\n    location / {\n        proxy_pass          http://controlplane.mydomain.com:8050;\n        client_max_body_size 100m;\n        proxy_set_header    Host               $host;\n        proxy_set_header    X-Real-IP          $remote_addr;\n        proxy_set_header    X-Forwarded-For    $proxy_add_x_forwarded_for;\n        proxy_set_header    X-Forwarded-Host   $host;\n        proxy_set_header    X-Forwarded-Server $host;\n        proxy_set_header    X-Forwarded-Port   $server_port;\n        proxy_set_header    X-Forwarded-Proto  $scheme;\n        proxy_set_header    Authorization  $http_authorization;\n    }\n}\n</code></pre>"},{"location":"CONFIG/","title":"CONFIG.INI","text":"<p>The application reads the provided config.ini file to initialize the application. You can provide the location of this file (full path and name) to the <code>start-..</code> scripts.</p> <p>When values in the config.ini require secrets from the vault provider use the syntax ${vault:}. The values are replaced when the config file is parsed."},{"location":"CONFIG/#sections-documentation","title":"Sections documentation","text":""},{"location":"CONFIG/#appcfg","title":"appcfg","text":"<p>General application settings</p> <p>[appcfg]</p> <p><code>title</code>: Application title to display on the Navigation bar</p> <p>Example title=Data Transformer</p> <p><code>db_url</code>: Url to connect to the database</p> <p>Example db_url=sqlite+aiosqlite:////tmp/data.db</p> <p><code>max_file_size</code>: Max size for a single file in bytes</p> <p>Example max_file_size=10000000</p> <p><code>max_storage_size</code>: Max total size of files in bytes per account</p> <p>Example max_storage_size=100000000 </p> <p><code>webhook_domain_whitelist</code>: Comma separated list of domains allowed for webhooks</p> <p>Example webhook_domain_whitelist=webhook.site, webhook-test.com</p> <p><code>debug</code>: Not implemented</p> <p>Example debug=false</p> <p><code>file_ttl</code>: Hours before deleting a file. No automation is implemented yet. You can delete by invoking the API call to /platform/delete-expired-files </p> <p>Example file_ttl=72</p> <p>TODO</p> <p>require_email_verification=false</p> <p>allow_plus_in_email=false</p> <p>enable_announcements=true</p> <p>log_level=info</p>"},{"location":"CONFIG/#vaultprovider","title":"vaultprovider","text":"<p>Secrets provider configuration. Classes for each provider are defined in the application. Current implementation support an environment file</p> <p>[vaultprovider]</p> <p><code>type</code>: Provider class. Options: envfile</p> <p>Example type=envfile</p> <p>ENVFILE options</p> <p>path=../../   # Path to locate file</p> <p>file=secrets.txt # File name</p>"},{"location":"CONFIG/#fileprovider","title":"fileprovider","text":"<p>File storage provider. Classes for each provider type are defined in the application. Currently local filesystem is support. S3 is next.</p> <p>[fileprovider]</p> <p><code>type</code>: Provider class. Options: localfs</p> <p>LOCLAFS options path=/tmp/data # Path to store files</p>"},{"location":"CONFIG/#dataplane","title":"dataplane","text":"<p>Endpoint url for dataplane [dataplane] url=http://localhost:9000 # Endpoint where data plane is listening</p>"},{"location":"CONFIG/#controlplane","title":"controlplane","text":"<p>Endpoint url for dataplane [controlplane] url=http://localhost:8050 # URL of controlplane. We use this to contruct urls from the dataplane (like password reset url)</p>"},{"location":"CONFIG/#background-provider","title":"background provider","text":"<p>Background tasks execution provider. A class is defined in the application to handle background tasks. Currently on FastApi Backgroundtasks is implemented</p> <p>[backgroundprovider]</p> <p>type=fastapi</p>"}]}