{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Data Onboarding - transformer builder","text":""},{"location":"#sample-transform-map-and-simplify-you-data-exchanges","title":"Sample, transform, map and simplify you data exchanges","text":"<p>Enable your customers and partners to upload CSV/XLS files and transform them to match your internal data schemas. The platform provides the infrastructure and components to generate data transformers and unique URLs for users to upload their data. </p> <p>Questions: Ask Here</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Upload CSV/XLS file: Users can easily upload a CSV/XLS file through the user interface.</li> <li>Column transformers: The project allows users to create transformers for each column using the ACE code editor.</li> <li>Restricted Python: The data transformer utilizes restricted Python to ensure secure and controlled data manipulation.</li> <li>Share a unique URL to upload/download files</li> <li>Trigger Webhook when a file is processed</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To get started with Xformer Builder, follow these steps:</p> <ol> <li>Clone the repository: <code>git clone https://github.com/marcelonyc/xformer-builder</code></li> <li>Run setup.sh <ul> <li>Requires Python &gt; 3.10 </li> </ul> </li> <li>In one terminal run: <code>start-dev-dataplane.sh</code></li> <li>In another terminal run: <code>start-dev-controlplane.sh</code></li> <li>Access the application through your web browser at <code>http://localhost:8050</code></li> </ol> <p></p> <p>Suggestions for deployment architecture: Here</p>"},{"location":"#create-a-transformer","title":"Create a transformer","text":"<ol> <li>Upload CSV/XLS file: Click on \"Upload Sample CSV/XLS file\" and select a CSV/XLS file from your local machine.</li> <li>Create transformers: Use the ACE code editor to create transformers for each column. Ensure that the code adheres to the restricted Python guidelines.<ul> <li>Use <code>data</code> as the variable containing the source data.</li> <li>Use the dictionary <code>columns[]</code> to get values from other columns</li> <li>Examples:<ul> <li><code>data / 1000</code></li> <li><code>data.split(\"-\")</code></li> <li><code>data * columns['other_data']</code></li> </ul> </li> </ul> </li> <li>Test transformations: Once the transformers are created, click on the \"Test\" button to execute the transformations.<ul> <li>The result displays on the column's row. You need to expand it.</li> <li>Any errors will display in the column's row</li> </ul> </li> <li>When you are finished, Name the transformer. </li> <li>Test all the transformers from the navigation bar. (:runner:)</li> <li>Save transformers</li> </ol>"},{"location":"#application-configuration","title":"Application Configuration","text":"<p>To customize the application configuration, review the CONFIG.INI document</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! If you would like to contribute to Xformer Builder, please follow these guidelines:</p> <ol> <li>Fork the repository.</li> <li>Create a new branch for your feature or bug fix.</li> <li>Make your changes and commit them with descriptive messages.</li> <li>Push your changes to your forked repository.</li> <li>Submit a pull request to the main repository.</li> </ol>"},{"location":"#screenshots","title":"Screenshots","text":"<p>Here are some screenshots of the Xformer Builder application:</p>"},{"location":"#_1","title":"Home","text":""},{"location":"#_2","title":"Home","text":""},{"location":"#expand-row-to-see-transformation-resutls","title":"Expand row to see transformation resutls","text":""},{"location":"#technologies-and-tools-in-this-project","title":"Technologies and tools in this project","text":"<p>Build a data transformer using restricted Python with a Web UI using Dash. The transformer is designed to manipulate data in columns from a CSV/XLS file. The project provides a user interface (UI) that allows users to upload the CSV/XLS file and create transformers for each column using the ACE code editor.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License. See the LICENSE file for more information.</p>"},{"location":"ArchitectureSuggestions/","title":"Deployment Architecture Ideas","text":""},{"location":"ArchitectureSuggestions/#firewall","title":"Firewall","text":"<p>The firewall restrics access to specific ports. Cloud vendors offer security groups to associate with services running in your vpc.</p> <p>You need to, at least, forward 443 to 8050 where your ControlPlane service is running.</p>"},{"location":"ArchitectureSuggestions/#reverse-proxy","title":"Reverse Proxy","text":"<p>Use a reverse proxy to forward traffic to specific urls for the services. The reverse proxy also serves as your https endpoint where your SSL certificate resides. Get familiar with NGINX to understand the configuration.</p>"},{"location":"ArchitectureSuggestions/#nginx-example-i","title":"NGINX Example I","text":"<p>In this example I provide a file that would go into nginx /etc/nginx/servers directory. The nginx.conf file contains <code>include servers/*.conf</code></p>"},{"location":"ArchitectureSuggestions/#forward-all-calls-to-the-controlplane","title":"Forward all calls to the Controlplane","text":"<p>controlplane.conf</p> <pre><code>server {\n    listen 443 ssl;\n    server_name dataplane.somedomain.com;\n    proxy_intercept_errors on;\n\n    location / {\n        proxy_pass          http://controlplane.mydomain.com:8050;\n        client_max_body_size 100m;\n        proxy_set_header    Host               $host;\n        proxy_set_header    X-Real-IP          $remote_addr;\n        proxy_set_header    X-Forwarded-For    $proxy_add_x_forwarded_for;\n        proxy_set_header    X-Forwarded-Host   $host;\n        proxy_set_header    X-Forwarded-Server $host;\n        proxy_set_header    X-Forwarded-Port   $server_port;\n        proxy_set_header    X-Forwarded-Proto  $scheme;\n        proxy_set_header    Authorization  $http_authorization;\n    }\n}\n</code></pre>"},{"location":"CONFIG/","title":"CONFIG.INI","text":"<p>The application reads the provided config.ini file to initialize the application. You can provide the location of this file (full path and name) to the <code>start-..</code> scripts.</p> <p>When values in the config.ini require secrets from the vault provider use the syntax ${vault:}. The values are replaced when the config file is parsed."},{"location":"CONFIG/#sections-documentation","title":"Sections documentation","text":""},{"location":"CONFIG/#appcfg","title":"appcfg","text":"<p>General application settings</p> <p>[appcfg]</p> <p><code>title</code>: Application title to display on the Navigation bar</p> <p>Example title=Data Transformer</p> <p><code>db_url</code>: Url to connect to the database</p> <p>Example db_url=sqlite+aiosqlite:////tmp/data.db</p> <p><code>max_file_size</code>: Max size for a single file in bytes</p> <p>Example max_file_size=10000000</p> <p><code>max_storage_size</code>: Max total size of files in bytes per account</p> <p>Example max_storage_size=100000000 </p> <p><code>webhook_domain_whitelist</code>: Comma separated list of domains allowed for webhooks</p> <p>Example webhook_domain_whitelist=webhook.site, webhook-test.com</p> <p><code>debug</code>: Not implemented</p> <p>Example debug=false</p> <p><code>file_ttl</code>: Hours before deleting a file. No automation is implemented yet. You can delete by invoking the API call to /platform/delete-expired-files </p> <p>Example file_ttl=72</p> <p>TODO</p> <p>require_email_verification=false</p> <p>allow_plus_in_email=false</p> <p>enable_announcements=true</p> <p>log_level=info</p>"},{"location":"CONFIG/#vaultprovider","title":"vaultprovider","text":"<p>Secrets provider configuration. Classes for each provider are defined in the application. Current implementation support an environment file</p> <p>[vaultprovider]</p> <p><code>type</code>: Provider class. Options: envfile</p> <p>Example type=envfile</p> <p>ENVFILE options</p> <p>path=../../   # Path to locate file</p> <p>file=secrets.txt # File name</p>"},{"location":"CONFIG/#fileprovider","title":"fileprovider","text":"<p>File storage provider. Classes for each provider type are defined in the application. Currently local filesystem is support. S3 is next.</p> <p>[fileprovider]</p> <p><code>type</code>: Provider class. Options: localfs, s3</p> <p>LOCALFS options</p> <p>path=/tmp/data # Path to store files</p> <p>S3 options</p> <p>bucket=s3://mybucket  # S3 Bucket name</p> <p>endpoint_url=http://localhost:9000  # Set if not using a standard AWS endpoint</p> <p>region=us-west-1  # Required for some providers</p> <p>access_key_id=${vault:access_key_id}  # Access Key stored in a vault provider</p> <p>secret_access_key=${vault:secret_access_key}  # Secret stored in a vault provider</p>"},{"location":"CONFIG/#dataplane","title":"dataplane","text":"<p>Endpoint url for dataplane [dataplane] url=http://localhost:9000 # Endpoint where data plane is listening</p>"},{"location":"CONFIG/#controlplane","title":"controlplane","text":"<p>Endpoint url for dataplane [controlplane] url=http://localhost:8050 # URL of controlplane. We use this to contruct urls from the dataplane (like password reset url)</p>"},{"location":"CONFIG/#background-provider","title":"background provider","text":"<p>Background tasks execution provider. A class is defined in the application to handle background tasks. Currently, only FastApi Backgroundtasks is implemented</p> <p>[backgroundprovider]</p> <p>type=fastapi</p>"},{"location":"Docker/","title":"Run in Docker","text":""},{"location":"Docker/#build-the-image","title":"Build the image","text":"<p>Run these commands from the project's root directory</p> <pre><code>docker build -t xformer/services -f docker/images/services.Dockerfile  .\n</code></pre>"},{"location":"Docker/#run-in-docker_1","title":"Run in Docker","text":"<p>Run all services in a single Docker container.</p>"},{"location":"Docker/#configuration","title":"Configuration","text":"<ol> <li>Make a copy of config.ini and secrets.txt<ul> <li>Clone the GitHub repository or download config.ini and secrets.txt from the repo</li> </ul> </li> <li>Change the dataplane_token secret (in secrets.txt)</li> <li>Create a directory for the database</li> <li>Create a directory to save your files</li> <li>Review the Config documentation and change any required values</li> <li>Change app_cfg - db_url to db_url=sqlite+aiosqlite:////app/db/data.db</li> <li>Change fileprovider - path to /app/data</li> </ol>"},{"location":"Docker/#run-from-local-build","title":"Run from local build","text":"<p>Replace {PATH TO} with the location of your files and db directory</p> <pre><code>docker run --rm -v {PATH TO}/config.ini:/app/config.ini \\\n-v {PATH TO}/secrets.txt:/app/secrets.txt \\\n-v {PATH TO}/db:/app/db/ \\\n-p 9000:9000 \\\n-p 8050:8050 \\\n-e APP_CONFIG_FILE=/app/config.ini \\\n-e SERVICE=both \\\nxformer/services\n</code></pre>"},{"location":"Docker/#run-from-release-build","title":"Run from release build","text":"<ul> <li>Replace {PATH TO} with the location of your files and db directory</li> <li>Replace {TAG} with the image tag</li> </ul> <pre><code>docker run --rm -v {PATH TO}/config.ini:/app/config.ini \\\n-v {PATH TO}/secrets.txt:/app/secrets.txt \\\n-v {PATH TO}/db:/app/db/ \\\n-v {PATH TO}/data:/app/data \\\n-p 9000:9000 \\\n-p 8050:8050 \\\n-e APP_CONFIG_FILE=/app/config.ini \\\n-e SERVICE=both \\\nmarcelonyc/xformer:{TAG}\n</code></pre>"},{"location":"Docker/#notes","title":"NOTES","text":"<ul> <li>Forwarding port 9000 is optional. That port is for the dataplane.</li> <li>After starting the container, got to http://localhost:8050 </li> </ul>"},{"location":"LICENSE/","title":"License","text":"<p>MIT License</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"REGISTRY_DOC/","title":"Data Onboarding - transformer builder","text":""},{"location":"REGISTRY_DOC/#sample-transform-map-and-simplify-you-data-exchanges","title":"Sample, transform, map and simplify you data exchanges","text":"<p>Enable your customers and partners to upload CSV/XLS files and transform them to match your internal data schemas. The platform provides the infrastructure and components to generate data transformers and unique URLs for users to upload their data.</p> <p></p> <p>Please read the documentation for more details </p> <p>Clone the GitHub repository for additional capabilities and the latest dev versions. </p>"},{"location":"REGISTRY_DOC/#configuration","title":"Configuration","text":"<ol> <li>Make a copy of config.ini and secrets.txt<ul> <li>Clone the GitHub repository or download config.ini and secrets.txt from the repo</li> </ul> </li> <li>Change the dataplane_token secret (in secrets.txt)</li> <li>Create a directory for the database</li> <li>Create a directory to save your files</li> <li>Review the Config documentation and change any required values</li> <li>Change app_cfg - db_url to db_url=sqlite+aiosqlite:////app/db/data.db</li> <li>Change fileprovider - path to /app/data</li> </ol>"},{"location":"REGISTRY_DOC/#run-both-services-in-one-container","title":"Run both services in one container","text":"<ul> <li>Change {PATH TO} to the path of your files. You must set, config, secrets, db and data locations. </li> <li>Set the {TAG} to the version you want to deploy (Check the Github repository to release notes)</li> </ul> <pre><code>docker run --rm -v {PATH TO}/config.ini:/app/config.ini \\\n-v {PATH TO}/secrets.txt:/app/secrets.txt \\\n-v {PATH TO}/db:/app/db/ \\\n-v {PATH TO}/data:/app/data \\\n-p 9000:9000 \\\n-p 8050:8050 \\\n-e APP_CONFIG_FILE=/app/config.ini \\\n-e SERVICE=both \\\nquay.io/marcelonyc/xformer:{TAG}\n</code></pre> <p>Note:</p> <p>9000 is the dataplane port. It is optional to expose it</p> <p>If the services start successfully, go to http://localhost:8050 on your browser.</p>"}]}